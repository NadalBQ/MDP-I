misScores = res.pca_sin2$ind$coord[,1:K_sin]
miT2 = colSums(t(misScores**2)/eig.val_sin[1:K_sin,1])
I = nrow(datos)
F95 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.95, K_sin, I-K_sin)
F99 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.99, K_sin, I-K_sin)
plot(1:length(miT2), miT2, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
anomalas = which(miT2 > F95*2)
anomalas
misScores_con = res.pca_con2$ind$coord[,1:K_con]
miT2_con = colSums(t(misScores_con**2)/eig.val_con[1:K_con,1])
I_con = nrow(datos)
F95_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.95, K_con, I-K_con)
F99_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.99, K_con, I-K_con)
plot(1:length(miT2_con), miT2_con, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95_con, col = "orange", lty = 2, lwd = 2)
abline(h = F99_con, col = "red3", lty = 2, lwd = 2)
anomalas_con = which(miT2_con > F95_con)
anomalas_con
datos = datos[-anomalas,]
res.pca_sin = PCA(datos, scale.unit = FALSE, graph = FALSE, ncp = 10,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = which(descRatones$tipo == "binaria"))
eig.val_sin <- get_eigenvalue(res.pca_sin)
VPmedio_sin = 100 * (1/nrow(eig.val_sin))
fviz_eig(res.pca_sin, addlabels = TRUE) +
geom_hline(yintercept=VPmedio_sin, linetype=2, color="red")
kable(eig.val_sin[1:6,])
K_sin = 4
res.pca_sin2 = PCA(datos, scale.unit = FALSE, graph = FALSE, ncp = K_sin,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = 77:79)
res.pca_con = PCA(datos, scale.unit = TRUE, graph = FALSE, ncp = 10,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = which(descRatones$tipo == "binaria"))
eig.val_con <- get_eigenvalue(res.pca_con)
VPmedio_con = 100 * (1/nrow(eig.val_con))
fviz_eig(res.pca_con, addlabels = TRUE) +
geom_hline(yintercept=VPmedio_con, linetype=2, color="red")
kable(eig.val_con[1:6,])
K_con = 4
res.pca_con2 = PCA(datos, scale.unit = TRUE, graph = FALSE, ncp = K_con,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = 77:79)
misScores = res.pca_sin2$ind$coord[,1:K_sin]
miT2 = colSums(t(misScores**2)/eig.val_sin[1:K_sin,1])
I = nrow(datos)
F95 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.95, K_sin, I-K_sin)
F99 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.99, K_sin, I-K_sin)
plot(1:length(miT2), miT2, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
misScores_con = res.pca_con2$ind$coord[,1:K_con]
miT2_con = colSums(t(misScores_con**2)/eig.val_con[1:K_con,1])
I_con = nrow(datos)
F95_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.95, K_con, I-K_con)
F99_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.99, K_con, I-K_con)
plot(1:length(miT2_con), miT2_con, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95_con, col = "orange", lty = 2, lwd = 2)
abline(h = F99_con, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F95)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F95)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
library(grid)
library(gridExtra)
p1_con = fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"),
habillage = factor(miT2_con > F95_con)) +
tune::coord_obs_pred()
p2_con = fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"),
habillage = factor(miT2_con > F95_con)) +
tune::coord_obs_pred()
grid.arrange(p1_con,p2_con, nrow = 1)
fviz_pca_var(res.pca_sin2, axes = c(1,2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_var(res.pca_sin2, axes = c(3,4), repel = TRUE,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
select.var = list("contrib"=40), labelsize = 2)
fviz_pca_var(res.pca_con2, axes = c(1,2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_var(res.pca_con2, axes = c(3,4), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
clases <- res.pca_sin2$call$X$Clase
ind_deseados <- which(clases %in% c("t-CS-m", "t-CS-s"))
ind_names <- rownames(res.pca_sin2$ind$coord)[ind_deseados]
fviz_pca_ind(res.pca_sin2,
axes = c(1,2),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
fviz_pca_ind(res.pca_sin2,
axes = c(3,4),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
fviz_pca_ind(res.pca_con2,
axes = c(1,2),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
fviz_pca_ind(res.pca_con2,
axes = c(3,4),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
datos$MouseIDlimpio <- gsub("_\\d+$", "", datos$MouseID)
head(datos, 3)
datos_sinID <- subset(datos, select = -c(MouseID))
descRatonesID = data.frame("variable" = colnames(datos_sinID),
"tipo" = c(rep("numerical", 75),
rep("binary", 3), rep("categorical", 2)), stringsAsFactors = FALSE)
rownames(descRatonesID) = descRatonesID$variable
descRatonesID
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(mice)
library(knitr)
library(purrr)
datos = read_excel("RatonesLimpios.xlsx", col_names = TRUE)
datos = as.data.frame(datos)
newID = sapply(datos$MouseID, function (x) strsplit(x, "_")[[1]][1])
head(datos, 3)
descRatones = data.frame("variable" = colnames(datos),
"tipo" = c("categorical", rep("numerical", 75),
rep("binary", 3), "categorical"), stringsAsFactors = FALSE)
rownames(descRatones) = descRatones$variable
descRatones
# Apply centering ONLY to the final list of numeric columns
datos[,2:76] <- scale(datos[,2:76], center = TRUE, scale = FALSE)
# View first 3 rows
head(datos, 3)
library(FactoMineR)
library(factoextra)
res.pca_sin = PCA(datos, scale.unit = FALSE, graph = FALSE, ncp = 10,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = which(descRatones$tipo == "binaria"))
eig.val_sin <- get_eigenvalue(res.pca_sin)
VPmedio_sin = 100 * (1/nrow(eig.val_sin))
fviz_eig(res.pca_sin, addlabels = TRUE) +
geom_hline(yintercept=VPmedio_sin, linetype=2, color="red")
kable(eig.val_sin[1:6,])
K_sin = 4
res.pca_sin2 = PCA(datos, scale.unit = FALSE, graph = FALSE, ncp = K_sin,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = 77:79)
library(FactoMineR)
library(factoextra)
res.pca_con = PCA(datos, scale.unit = TRUE, graph = FALSE, ncp = 10,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = which(descRatones$tipo == "binaria"))
eig.val_con <- get_eigenvalue(res.pca_con)
VPmedio_con = 100 * (1/nrow(eig.val_con))
fviz_eig(res.pca_con, addlabels = TRUE) +
geom_hline(yintercept=VPmedio_con, linetype=2, color="red")
kable(eig.val_con[1:6,])
K_con = 4
res.pca_con2 = PCA(datos, scale.unit = TRUE, graph = FALSE, ncp = K_con,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = 77:79)
misScores = res.pca_sin2$ind$coord[,1:K_sin]
miT2 = colSums(t(misScores**2)/eig.val_sin[1:K_sin,1])
I = nrow(datos)
F95 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.95, K_sin, I-K_sin)
F99 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.99, K_sin, I-K_sin)
plot(1:length(miT2), miT2, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
anomalas = which(miT2 > F95*2)
anomalas
misScores_con = res.pca_con2$ind$coord[,1:K_con]
miT2_con = colSums(t(misScores_con**2)/eig.val_con[1:K_con,1])
I_con = nrow(datos)
F95_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.95, K_con, I-K_con)
F99_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.99, K_con, I-K_con)
plot(1:length(miT2_con), miT2_con, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95_con, col = "orange", lty = 2, lwd = 2)
abline(h = F99_con, col = "red3", lty = 2, lwd = 2)
anomalas_con = which(miT2_con > F95_con)
anomalas_con
datos = datos[-anomalas,]
res.pca_sin = PCA(datos, scale.unit = FALSE, graph = FALSE, ncp = 10,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = which(descRatones$tipo == "binaria"))
eig.val_sin <- get_eigenvalue(res.pca_sin)
VPmedio_sin = 100 * (1/nrow(eig.val_sin))
fviz_eig(res.pca_sin, addlabels = TRUE) +
geom_hline(yintercept=VPmedio_sin, linetype=2, color="red")
kable(eig.val_sin[1:6,])
K_sin = 4
res.pca_sin2 = PCA(datos, scale.unit = FALSE, graph = FALSE, ncp = K_sin,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = 77:79)
res.pca_con = PCA(datos, scale.unit = TRUE, graph = FALSE, ncp = 10,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = which(descRatones$tipo == "binaria"))
eig.val_con <- get_eigenvalue(res.pca_con)
VPmedio_con = 100 * (1/nrow(eig.val_con))
fviz_eig(res.pca_con, addlabels = TRUE) +
geom_hline(yintercept=VPmedio_con, linetype=2, color="red")
kable(eig.val_con[1:6,])
K_con = 4
res.pca_con2 = PCA(datos, scale.unit = TRUE, graph = FALSE, ncp = K_con,
quali.sup = which(descRatones$tipo == "categorical"),
quanti.sup = 77:79)
misScores = res.pca_sin2$ind$coord[,1:K_sin]
miT2 = colSums(t(misScores**2)/eig.val_sin[1:K_sin,1])
I = nrow(datos)
F95 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.95, K_sin, I-K_sin)
F99 = K_sin*(I**2 - 1)/(I*(I - K_sin)) * qf(0.99, K_sin, I-K_sin)
plot(1:length(miT2), miT2, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
misScores_con = res.pca_con2$ind$coord[,1:K_con]
miT2_con = colSums(t(misScores_con**2)/eig.val_con[1:K_con,1])
I_con = nrow(datos)
F95_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.95, K_con, I-K_con)
F99_con = K_con*(I_con**2 - 1)/(I_con*(I_con - K_con)) * qf(0.99, K_con, I-K_con)
plot(1:length(miT2_con), miT2_con, type = "p", xlab = "Ratones", ylab = "T2")
abline(h = F95_con, col = "orange", lty = 2, lwd = 2)
abline(h = F99_con, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F95)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F95)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
library(grid)
library(gridExtra)
p1_con = fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"),
habillage = factor(miT2_con > F95_con)) +
tune::coord_obs_pred()
p2_con = fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"),
habillage = factor(miT2_con > F95_con)) +
tune::coord_obs_pred()
grid.arrange(p1_con,p2_con, nrow = 1)
fviz_pca_var(res.pca_sin2, axes = c(1,2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_var(res.pca_sin2, axes = c(3,4), repel = TRUE,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
select.var = list("contrib"=40), labelsize = 2)
fviz_pca_var(res.pca_con2, axes = c(1,2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_var(res.pca_con2, axes = c(3,4), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Tratamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Genotipo", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Comportamiento", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
fviz_pca_ind(res.pca_sin2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(1,2), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
fviz_pca_ind(res.pca_con2, axes = c(3,4), geom = c("point"), repel = TRUE,
labelsize = 2,
habillage = "Clase", addEllipses = TRUE)
clases <- res.pca_sin2$call$X$Clase
ind_deseados <- which(clases %in% c("t-CS-m", "t-CS-s"))
ind_names <- rownames(res.pca_sin2$ind$coord)[ind_deseados]
fviz_pca_ind(res.pca_sin2,
axes = c(1,2),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
fviz_pca_ind(res.pca_sin2,
axes = c(3,4),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
fviz_pca_ind(res.pca_con2,
axes = c(1,2),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
fviz_pca_ind(res.pca_con2,
axes = c(3,4),
geom = "point",
repel = TRUE,
labelsize = 2,
habillage = clases,
addEllipses = TRUE,
select.ind = list(name = ind_names))
datos$MouseIDlimpio <- gsub("_\\d+$", "", datos$MouseID)
head(datos, 3)
datos_sinID <- subset(datos, select = -c(MouseID))
descRatonesID = data.frame("variable" = colnames(datos_sinID),
"tipo" = c(rep("numerical", 75),
rep("binary", 3), rep("categorical", 2)), stringsAsFactors = FALSE)
rownames(descRatonesID) = descRatonesID$variable
descRatonesID
View(datos_sinID)
View(datos)
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(readxl)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
library(grid)
library(gridExtra)
# Apply centering ONLY to the final list of numeric columns
datos[,2:76] <- scale(datos[,2:76], center = TRUE, scale = FALSE)
# View first 3 rows
head(datos, 3)
datos_num = datos[,descRatones$variable[descRatones$tipo == "numerical"]]
head(datos_num)
midist <- get_dist(datos_num, stand = FALSE, method = "euclidean")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
set.seed(100)
myN = c(20, 35, 50, 65)  # m
myhopkins = NULL
myseed = sample(1:1000, 10)
for (i in myN) {
for (j in myseed) {
tmp = get_clust_tendency(data = datos_num, n = i, graph = FALSE, seed = j)
myhopkins = c(myhopkins, tmp$hopkins_stat)
}
}
summary(myhopkins)
p1 = fviz_nbclust(x = datos_num, FUNcluster = hcut, method = "silhouette",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = datos_num, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
clust1 <- hclust(midist, method="ward.D2")
grupos1 <- cutree(clust1, k=3)
table(grupos1)
fviz_dend(clust1, k = 3,
cex = 0.5, color_labels_by_k = TRUE,
rect = TRUE) # dibujar rectángulos
p1 = fviz_nbclust(x = datos_num, FUNcluster = hcut, method = "silhouette",
hc_method = "average", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = datos_num, FUNcluster = hcut, method = "wss",
hc_method = "average", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
clust2 <- hclust(midist, method="average")
grupos2 = cutree(clust2, k = 4)
fviz_dend(clust2, k = 4,
cex = 0.5,
color_labels_by_k = TRUE, # colorear etiquetas por grupo
rect = TRUE) # dibujar rectángulos
table(grupos2)
p1 = fviz_nbclust(x = datos_num, FUNcluster = hcut, method = "silhouette",
hc_method = "centroid", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = datos_num, FUNcluster = hcut, method = "wss",
hc_method = "centroid", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
clust3 <- hclust(midist, method="centroid")
grupos3 = cutree(clust3, k = 3)
fviz_dend(clust3, k = 3,
cex = 0.5,
color_labels_by_k = TRUE, # colorear etiquetas por grupo
rect = TRUE) # dibujar rectángulos
table(grupos3)
p1 = fviz_nbclust(x = datos_num, FUNcluster = kmeans, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "K-means")
p2 = fviz_nbclust(x = datos_num, FUNcluster = kmeans, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "K-means")
grid.arrange(p1, p2, nrow = 1)
set.seed(100)
clust4 <- kmeans(datos_num, centers = 3, nstart = 20)
table(clust4$cluster)
p1 = fviz_nbclust(x = datos_num, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = datos_num, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clust5 <- pam(datos_num, k = 3)
table(clust5$clustering)
library(ggsci)
colores = pal_npg("nrc")(3)
par(mfrow = c(1,3))
plot(silhouette(grupos1, midist), col=colores, border=NA, main = "WARD")
plot(silhouette(clust4$cluster, midist), col=colores, border=NA, main = "K-MEDIAS")
plot(silhouette(clust5$clustering, midist), col=colores, border=NA, main = "K-MEDOIDES")
# Comparación de los métodos
metodos = c("hierarchical","kmeans","pam")
validacion = suppressMessages(clValid(datos_num, nClust = 3, metric = "euclidean",
clMethods = metodos,
validation = c("internal", "stability"),
method = "ward"))
